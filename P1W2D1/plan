Объект - неупорядоченный набор пар ключ-значение

1. Структура vs тип данных (typeof)
const obj = {} //тип - объект, структура - объект, typeof === 'object'
const arr = [] // тип - объект, структура - массив, typeof === 'object'
function func () => {} // тип - объект, структура - объект, typeof === 'function'

- Функции можно использовать как объект, задавать им свойства.
Можно, но не нужно


2. Что есть у объекта? (свойства, методы)
Все можно представить как объект с набором каких-то характеристик.

- Как записывать методы
- как обращаться к свойствам
- как проверить наличие ключа в объекте
- как удалить ключ
- перебор ключей (for in)

Как создать несколько объектов с одинаковой структурой?


3. this
- Что такое контекст 

this определяется в момент вызова функции и зависит от того, как именно она вызвана
При глобальном контексте исполнения в браузере создается глобальный объект window, в node - global

- Варианты:
    this вне функции
    в функции
    функция как метод объекта
    коллбэк в слушателе
    ! в стрелочных функциях !

- Потеря контекста
- call, bind, apply

/////////////////////////

4. Как создавать объекты:
    - литерал
    - конструктор

Конструкторы:
- собственная реализация

5. Функция-конструктор
    - что в ней просиходит
    - что такое прототип 
    - почему надо записывать методы в прототип

6. __proto__ vs prototype

    - цепочка прототипов
    - Наследование
